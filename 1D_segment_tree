# 1D segment tree

class segment_treenode:
    def __init__(self,start,end):
        self.start = start
        self.end = end
        self.sum = 0
        self.left = None
        self.right = None

class seg_tree:
    def __init__(self,array):
        self.array = array
        self.root = self._build_segtree(array,0,len(array)-1)

    def update(self, idx, val):
        diff = val - self.array[idx]
        self.array[idx] = val
        cur = self.root
        while cur:
            if idx>=cur.start and idx<=cur.end:
                cur.sum += diff
            if idx<=(cur.start+cur.end)//2:
                cur = cur.left
            else:
                cur = cur.right
    
    
    def _build_segtree(self,array,start,end):
        if start>end:
            return
        if start==end:
            cur = segment_treenode(start,end)
            cur.sum = array[start]
            return cur
        cur = segment_treenode(start,end)
#         cur.sum = sum(array[start:end+1])
        cur.left = self._build_segtree(array,start,(end+start)//2)
        cur.right = self._build_segtree(array,(end+start)//2+1,end)
        if cur.left:
            cur.sum += cur.left.sum
        if cur.right:
            cur.sum += cur.right.sum
        return cur
    
    def find_sum(self,start,end):
        return self._sum_helper(self.root,start,end)
        
    def _sum_helper(self,cur,start,end):
        if not cur or cur.start>end or cur.end<start:
            return 0
        elif cur.start>=start and cur.end<=end:
            return cur.sum
        return self._sum_helper(cur.left,start,end)+self._sum_helper(cur.right,start,end)
        
# test
lst = [1,3,2,4,5]
st = seg_tree(lst)
print(st.find_sum(1,3))
st.update(2,6)
print(st.find_sum(1,3))
